from datetime import datetime

import brom

from dbconnection import DBConnection
from models import Subscription, SubscriptionType


def get_all_groups() -> list:
    con = DBConnection().client
    selector: brom.–°–µ–ª–µ–∫—Ç–æ—Ä = con.–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ì—Ä—É–ø–ø—ã.–°–æ–∑–¥–∞—Ç—å–°–µ–ª–µ–∫—Ç–æ—Ä()
    selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–°–æ–≤–º–µ—â–µ–Ω–∏–µ", False)
    selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–ü–æ–º–µ—Ç–∫–∞–£–¥–∞–ª–µ–Ω–∏—è", False)
    selector.–î–æ–±–∞–≤–∏—Ç—å–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É("–ö—É—Ä—Å")
    selector.–î–æ–±–∞–≤–∏—Ç—å–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    selector.–î–æ–±–∞–≤–∏—Ç—å–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É("–ù–æ–º–µ—Ä–ì—Ä—É–ø–ø—ã")
    return selector.–í—ã–±—Ä–∞—Ç—å().–í—ã–≥—Ä—É–∑–∏—Ç—å–†–µ–∑—É–ª—å—Ç–∞—Ç()


def get_all_teachers() -> list:
    con = DBConnection().client
    selector: brom.–°–µ–ª–µ–∫—Ç–æ—Ä = con.–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏.–°–æ–∑–¥–∞—Ç—å–°–µ–ª–µ–∫—Ç–æ—Ä()
    selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–ü–æ–º–µ—Ç–∫–∞–£–¥–∞–ª–µ–Ω–∏—è", False)
    selector.–î–æ–±–∞–≤–∏—Ç—å–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
    return selector.–í—ã–±—Ä–∞—Ç—å().–í—ã–≥—Ä—É–∑–∏—Ç—å–†–µ–∑—É–ª—å—Ç–∞—Ç()


def get_schedule(group: str, schedule: brom.–î–æ–∫—É–º–µ–Ω—Ç–°—Å—ã–ª–∫–∞, date: datetime = datetime.now()) -> str:
    header = f"<b>{group} ‚Äî {schedule.–î–∞—Ç–∞.strftime('%d.%m.%Y')}:</b>"
    res = f""""""
    for class_number in range(1, 8):
        current_class_schedule = "".join([f"\n<i>{row.–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å}</i> ‚Äî {row.–ê—É–¥–∏—Ç–æ—Ä–∏—è}"
                                          for row in schedule[f"–ü–∞—Ä–∞{class_number}"]
                                          if group in row.–ì—Ä—É–ø–ø–∞.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                                          ])
        if not current_class_schedule:
            continue
        res += f"\n\n<b>{class_number}. {get_class_time(class_number, date)}</b> " + current_class_schedule
    if not res:
        return f"–ü–∞—Ä –¥–ª—è <b>{group}</b> –Ω–∞ {schedule.–î–∞—Ç–∞.strftime('%d.%m.%Y')} –Ω–µ—Ç."
    return header + res


def check_schedule_by_date(date: datetime) -> brom.–î–æ–∫—É–º–µ–Ω—Ç–°—Å—ã–ª–∫–∞ | None:
    con = DBConnection()
    selector: brom.–°–µ–ª–µ–∫—Ç–æ—Ä = con.client.–î–æ–∫—É–º–µ–Ω—Ç—ã.–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–†–∞—Å–ø–∏—Å–∞–Ω–∏—è.–°–æ–∑–¥–∞—Ç—å–°–µ–ª–µ–∫—Ç–æ—Ä()
    try:
        selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", True)
        selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–î–∞—Ç–∞", date)
        schedule = selector.–í—ã–≥—Ä—É–∑–∏—Ç—å–†–µ–∑—É–ª—å—Ç–∞—Ç()[0]
        return schedule
    except AttributeError:
        return None


def get_teacher_schedule(teacher_full_name: str, schedule: brom.–î–æ–∫—É–º–µ–Ω—Ç–°—Å—ã–ª–∫–∞, date: datetime = datetime.now()) -> str:
    header = f"""<b>{teacher_full_name} ‚Äî {schedule.–î–∞—Ç–∞.strftime('%d.%m.%Y')}:</b>"""
    res = ""
    for class_number in range(1, 8):
        current_class_schedule = "".join([f"\n<i>{row.–ì—Ä—É–ø–ø–∞}</i> ‚Äî {row.–ê—É–¥–∏—Ç–æ—Ä–∏—è}"
                                          for row in schedule[f"–ü–∞—Ä–∞{class_number}"]
                                          if teacher_full_name in row.–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                                          ])
        if not current_class_schedule:
            continue
        res += f"\n\n<b>{class_number}. {get_class_time(class_number, date)}</b> " + current_class_schedule
    if not res:
        return f"–ü–∞—Ä –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è <b>{teacher_full_name}</b> –Ω–∞ {schedule.–î–∞—Ç–∞.strftime('%d.%m.%Y')} –Ω–µ—Ç."
    return header + res


def get_class_time(class_number: int, date: datetime) -> str:
    schedule = {
        1: "08:30-10:00",
        2: "10:10-11:40",
        3: "12:20-13:50" if date.weekday() != 5 else "12:00-13:30",
        4: "14:00-15:30" if date.weekday() != 5 else "13:40-15:10",
        5: "15:50-17:20" if date.weekday() != 5 else "15:20-16:50",
        6: "17:30-19:00" if date.weekday() != 5 else "17:00-18:30",
        7: "19:10-20:40" if date.weekday() != 5 else "18:40-20:10"
    }
    return schedule.get(class_number)


def get_group_by_id(group_id: int) -> str:
    con = DBConnection()
    group_selector: brom.–°–µ–ª–µ–∫—Ç–æ—Ä = con.client.–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ì—Ä—É–ø–ø—ã.–°–æ–∑–¥–∞—Ç—å–°–µ–ª–µ–∫—Ç–æ—Ä()
    group_selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–ö–æ–¥", group_id)
    return group_selector.–í—ã–≥—Ä—É–∑–∏—Ç—å–†–µ–∑—É–ª—å—Ç–∞—Ç()[-1].–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ


def get_teacher_by_id(teacher_id: int) -> str:
    con = DBConnection()
    group_selector: brom.–°–µ–ª–µ–∫—Ç–æ—Ä = con.client.–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏.–°–æ–∑–¥–∞—Ç—å–°–µ–ª–µ–∫—Ç–æ—Ä()
    group_selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–ö–æ–¥", teacher_id)
    return group_selector.–í—ã–≥—Ä—É–∑–∏—Ç—å–†–µ–∑—É–ª—å—Ç–∞—Ç()[-1].–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ


def get_teacher_id_by_name(teacher_name: int) -> int:
    con = DBConnection()
    group_selector: brom.–°–µ–ª–µ–∫—Ç–æ—Ä = con.client.–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏.–°–æ–∑–¥–∞—Ç—å–°–µ–ª–µ–∫—Ç–æ—Ä()
    group_selector.–î–æ–±–∞–≤–∏—Ç—å–û—Ç–±–æ—Ä("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", teacher_name)
    return group_selector.–í—ã–≥—Ä—É–∑–∏—Ç—å–†–µ–∑—É–ª—å—Ç–∞—Ç()[-1].–ö–æ–¥


def get_schedule_from_subscriptions(username: str, subs: list[Subscription], date: datetime.date, schedule: brom.–î–æ–∫—É–º–µ–Ω—Ç–°—Å—ã–ª–∫–∞) -> str:
    
    res = f"<b>{username if username == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' else '@' + username}</b>, –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
    if not subs:
        return f"<b>{username if username == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' else '@' + username}</b>, —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫."
    teacher_schedule = "<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: \n</b>"
    group_schedule = "<b>–ì—Ä—É–ø–ø—ã: \n</b>"
    try:
        all_groups = get_all_groups()
        all_teachers = get_all_teachers()
        for sub in subs:
            match sub.entity_type:
                case SubscriptionType.GROUP:
                    group = next((item for item in all_groups if int(item.–ö–æ–¥) == sub.entity_id), None)
                    today_schedule = get_schedule(group.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, schedule, date) + "\n"
                    group_schedule += f"{today_schedule} {'-':->60}\n"
                    
                case SubscriptionType.TEACHER:
                    teacher = next((item for item in all_teachers if int(item.–ö–æ–¥) == sub.entity_id), None)
                    today_schedule = get_teacher_schedule(teacher.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, schedule, date) + "\n"
                    teacher_schedule += f"{today_schedule} {'-':->60}\n"
                    
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"
    return res + teacher_schedule + "\n" + group_schedule


def get_greeting_message():
    match datetime.now().hour:
        case h if 5 <= h < 12:
            return "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        case h if 12 <= h < 18:
            return "‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        case h if 18 <= h < 23:
            return "üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        case _:
            return "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏"
